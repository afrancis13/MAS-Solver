import random

from solver.parser.parser import Parser
from solver.general.final_solver import FinalSolver
from solver.staff.solutions_validator import processTest 

num_instance_files = 330
output_file 	   = open('./solutions/solutions.out', 'a')
instance_uri 	   = './instances/'

instanceSizes = [66,100,25,100,10,100,99,100,100,100,100,24,100,100,100,100,
100,27,100,33,100,20,98,21,50,100,100,100,100,100,100,100,100,100,96,100,90,
100,100,100,100,41,100,51,9,100,100,100,100,100,100,100,19,100,100,10,100,100,
100,100,100,100,100,100,100,7,62,100,100,100,100,100,100,100,100,100,100,10,
100,100,100,100,30,10,100,25,100,100,100,100,100,100,20,100,100,100,100,100,
100,100,6,100,18,17,15,100,12,50,57,100,20,100,20,100,100,100,100,10,100,100,
100,100,97,87,100,92,100,88,99,72,100,100,85,100,100,97,100,100,100,99,97,100,
100,20,80,97,63,100,100,100,4,40,17,100,100,100,80,100,100,100,100,100,89,100,
100,97,100,100,4,100,100,100,7,99,99,50,100,96,10,100,100,100,100,72,100,100,
100,100,81,100,93,100,100,100,100,6,100,27,100,100,100,100,100,97,20,100,100,
100,99,100,100,100,100,100,95,100,100,7,100,100,100,100,100,100,100,99,100,100,
100,100,87,100,65,100,99,100,100,100,100,25,100,26,97,72,90,100,100,100,100,
100,100,100,100,100,100,99,7,100,100,40,54,100,100,100,100,100,50,100,100,50,
64,5,100,100,100,100,100,5,23,7,100,100,100,100,100,100,81,100,10,100,20,85,
100,48,9,100,100,99,100,76,100,100,5,100,40,100,100,60,97,100,100,100,100,100,
100,100,100,100,10,100,100,80,23,6,100,100,100,100,4,100,100,10,100,100,100,
100,100,50,2,100,100,100,100,100,100,8,100,100,100,15,100,100,100,100,100,100,
100,6,100,99,100,100,100,100,97,100,97,100,87,100,100,100,100,100,100,100,100,
100,100,100,20,100,14,27,100,100,100,100,100,100,100,100,100,85,100,99,6,100,
40,100,100,100,100,100,90,100,100,100,6,100,100,80,100,70,7,100,100,100,100,9,
8,100,20,100,100,100,91,100,96,100,100,100,100,100,100,100,100,100,100,100,100,
10,60,100,64,100,50,100,100,100,100,100,100,100,100,100,100,100,100,50,100,100,
100,99,100,100,100,73,100,100,85,100,100,100,21,99,100,100,100,100,100,50,100,
100,70,100,50,100,100,100,100,100,97,100,100,100,100,100,100,100,100,100,100,
56,9,100,100,100,100,100,80,100,100,10,100,98,100,100,100,10,100,100,100,90,15,
100,100,100,99,100,97,100,6,100,10,100,100,100,100,100,100,99,10,100,97,100,
100,100,100,100,100,45,100,98,100,50,100,100,100,73,32,100,100,93,32,100,100,
25,8,100,7,100,100,95,100,98,100,100,46,81,100,100,5,100,100,100,100,50,60,40,
85,100,100,20,76,100,100,100,100,100,93,100,100,100,85,100,100,100,9,100,100,
100,6,100,100,100,100,100,60,100,100]


def main():
    for i in range(1, num_instance_files + 1):
        try:
            print "Currently analyzing input file " + str(i) + ".in"
            current_instance = instance_uri + str(i) + '.in'
            current_matrix   = Parser(current_instance).generate_matrix()
            current_solution = FinalSolver(current_matrix).maximum_acyclic_subgraph()
            solution = ''
            solution_to_validate = []

            for j in range(0, len(current_solution) - 1):
                solution_to_validate.append(str(current_solution[j] + 1))
                solution += (str(current_solution[j] + 1) + ' ')

            solution += str(current_solution[-1] + 1) + '\n'
            solution_to_validate.append(str(current_solution[-1] + 1))

            if processTest(solution_to_validate, instanceSizes[i-1]) == 'solution ok':
                output_file.write(solution)
                print "Successfully wrote the solution to input file " + str(i) + ".in to solutions.out"
            else:
                print "Ran into a formatting issue with the solution for input file " + str(i) + ".in"
                import pdb; pdb.set_trace()
                print processTest(solution_to_validate, instanceSizes[i-1])
                continue

        except Exception as e:
            import pdb; pdb.set_trace()
            print "Ran into issue with input file " + str(i) + ".in"
            continue

main()
